[
["index.html", "DfT R Cookbook Chapter 1 Why do we need another book? 1.1 Coding standards 1.2 Adding to the book", " DfT R Cookbook Isi Avbulimen, Hannah Bougdah, Tamsin Forbes, Andrew Kelly, Tim Taylor 2019-05-17 Chapter 1 Why do we need another book? R is a very flexible programming language, which inevitably means there are lots of ways to achieve the same result. This is true of all programming languages, but is particularly exaggerated in R which makes use of ‘meta-programming’. For example, here is how to calculate a new variable using standard R and filter on a variable: # Calculate kilometers per litre from miles per gallon mtcars$kpl &lt;- mtcars$mpg * 0.425144 # Select cars with a horsepower greater than 250 &amp; show only mpg and kpl columns mtcars[mtcars$hp &gt; 250, c(&quot;car&quot;, &quot;mpg&quot;, &quot;kpl&quot;)] car mpg kpl 29 15.8 6.717275 31 15.0 6.377160 Here’s the same thing using Tidyverse style R: mtcars %&gt;% # Calculate kilometers per litre dplyr::mutate( kpl = mpg * 0.425144 ) %&gt;% # Filter cars with a horsepower greater than 250 dplyr::filter( hp &gt; 250 ) %&gt;% # Take only the car, mpg, and newly created kpl columns dplyr::select(car, mpg, kpl) car mpg kpl 29 15.8 6.717275 31 15.0 6.377160 These coding styles are quite different. As people write more code across the Department, it will become increasingly important that code can be handed over to other R users. It is much easier to pick up code written by others if it uses the same coding style you are familiar with. This is the main motivation for this book, to establish a way of coding that represents a sensible default for those who are new to R that is readily transferable across DfT. 1.1 Coding standards Related to this, the Data Science team maintain a coding standards document, that outlines some best practices when writing R code. This is not prescriptive and goes beyond the scope of this document, but might be useful for managing your R projects. 1.2 Adding to the book This book is not static - new chapters can be added and current chapters can be amended. If you want to edit or write a chapter for the book, check out the GitHub page. "],
["basics.html", "Chapter 2 The basics 2.1 Vectors", " Chapter 2 The basics TO BE COMPLETED 2.1 Vectors 2.1.1 Types There are four main atomic vector types that you are likely to come across when using R1; logical (TRUE or FALSE), double (3.142), integer (2L) and character (&quot;Awesome&quot;) v1 &lt;- TRUE typeof(v1) ## [1] &quot;logical&quot; v1 &lt;- FALSE typeof(v1) ## [1] &quot;logical&quot; v2 &lt;- 1.5 typeof(v2) ## [1] &quot;double&quot; v2 &lt;- 1 typeof(v2) ## [1] &quot;double&quot; # integer values must be followed by an L to be stored as integers v3 &lt;- 2 typeof(v3) ## [1] &quot;double&quot; v3 &lt;- 2L typeof(v3) ## [1] &quot;integer&quot; v4 &lt;- &quot;Awesome&quot; typeof(v4) ## [1] &quot;character&quot; As well as the atomic vector types you will often encounter two other vector types; factor and Date. Factor vectors are used to represent categorical data. They are actually integer vectors with two additional attributes, levels and class. At this stage it is not worth worrying to much about what attribute are just understand that, for factors, the levels attribute gives the possible categories and combined with the integer values works much like a lookup table. The class attribute is just “factor”. ratings &lt;- factor(c(&quot;good&quot;, &quot;bad&quot;, &quot;bad&quot;, &quot;amazing&quot;)) typeof(ratings) ## [1] &quot;integer&quot; attributes(ratings) ## $levels ## [1] &quot;amazing&quot; &quot;bad&quot; &quot;good&quot; ## ## $class ## [1] &quot;factor&quot; Date vectors are just double vectors with an additional class attribute set as “Date”. Note - The following borrows directly from Hadley’s Advanced R site so we need to attribute appropriately and use correct licence today &lt;- Sys.Date() typeof(today) ## [1] &quot;double&quot; attributes(today) ## $class ## [1] &quot;Date&quot; The value of the double (which can be seen by stripping the class), represents the number of days since “1970-01-01”2: date &lt;- as.Date(&quot;1970-02-01&quot;) unclass(date) ## [1] 31 2.1.2 Conversion between atomic vector types Converting between the atomic vector types is done using the as.character, as.integer, as.logical and as.double functions. value &lt;- 1.5 as.integer(value) ## [1] 1 as.character(value) ## [1] &quot;1.5&quot; as.logical(value) ## [1] TRUE Where it is not possible to convert a value you will get a warning message value &lt;- &quot;z&quot; as.integer(value) ## Warning: NAs introduced by coercion ## [1] NA When combining different vector types, coercion will obey the following hierarchy: character, double, integer, logical. typeof(c(9.9, 3L, &quot;pop&quot;, TRUE)) ## [1] &quot;character&quot; typeof(c(9.9, 3L, TRUE)) ## [1] &quot;double&quot; typeof(c(3L, TRUE)) ## [1] &quot;integer&quot; typeof(TRUE) ## [1] &quot;logical&quot; technically there are more, see https://adv-r.hadley.nz/vectors-chap.html#atomic-vectors↩ This special date is known as the Unix Epoch↩ "],
["data-import.html", "Chapter 3 Data Importing/Exporting and interaction with other programmes 3.1 Libraries 3.2 Navigating folders 3.3 Working with files in R 3.4 Connecting to databases", " Chapter 3 Data Importing/Exporting and interaction with other programmes This chapter is for code examples of data importing/exporting and interactions with other programmes and databases. 3.1 Libraries library(tidyverse) library(DBI) library(dbplyr) library(haven) library(bigrquery) library(fs) 3.2 Navigating folders A couple of pointers to navigate from your working directory, which, if you’re using R projects (it is highly recommended that you do) will be wherever the .Rproj file is located 3.2.1 Down To navigate down folders use /. The path given below saves the file my_df.csv in the data folder, which itself is inside the monthly_work folder readr::write_csv( x = my_dataframe , path = &quot;monthly_work/data/my_df.csv&quot; ) 3.2.2 Up To go up a folder use ../. In particular you may need to do this when running Rmarkdown files. Rmarkdown files use their location as the working directory. If you have created an R folder, say, to stash all your scripts in, and a data folder to stash your data files in, then you will need to go up, before going down… The path below goes up one folder, then into the data folder, where the lookup_table.csv is located. lookup_table &lt;- readr::read_csv( file = &quot;../data/lookup_table.csv&quot; ) 3.3 Working with files in R This section focusses on reading in various filetypes for working on in R memory. 3.3.1 .rds .rds is R’s native file format, any object you create in R can be saved as a .rds file. The functions readRDS and saveRDS are base R functions. saveRDS( object = my_model #specify the R object you want to save , file = &quot;2019_0418_my_model.rds&quot; #give it a name, don&#39;t forget the file extension ) 3.3.2 .csv We use the functions read_csv and write_csv from the readr package (which is part of the tidyverse). These are a little bit cleverer than their base counterparts, however, this cleverness can catch you out. The file messy_pokemon_data.csv contains pokemon go captures data which has been deliberately messed up a bit. read_csv imputes the column specification from the first 1000 rows, which is fine if your first 1000 rows are representative of the data type. If not then subsequent data that can’t be coerced into the imputed data type will be replaced with NA. Looking at the column specification below notice that read_csv has recognised time_first_capture as a time type, but not date_first_capture as date type. Given the information that combat_power should be numeric we can see that something is also amiss here as read_csv has guessed character type for this column. pokemon &lt;- readr::read_csv( file = &quot;data/messy_pokemon_data.csv&quot; ) ## Parsed with column specification: ## cols( ## species = col_character(), ## combat_power = col_character(), ## hit_points = col_double(), ## weight_kg = col_double(), ## weight_bin = col_character(), ## height_m = col_double(), ## height_bin = col_character(), ## fast_attack = col_character(), ## charge_attack = col_character(), ## date_first_capture = col_character(), ## time_first_capture = col_time(format = &quot;&quot;) ## ) Let’s have a quick look at some data from these columns pokemon %&gt;% dplyr::select(species, combat_power, date_first_capture, time_first_capture) %&gt;% dplyr::arrange(desc(combat_power)) %&gt;% head() species combat_power date_first_capture time_first_capture electabuzz P962 29/04/2001 08:20:10 pidgey P95 27/11/1969 21:59:32 drowzee P613 18/07/1968 10:36:38 bulbasaur P577 17 June 1997 09:17:17 drowzee P542 04/07/1928 21:54:04 drowzee P518 06/09/1950 17:01:18 The pokemon dataset has less than 1000 rows so read_csv has ‘seen’ the letters mixed in with some of the numbers in the combat_power column. It has guessed at character type because everything in the column can be coerced to character type. What if there are more than 1000 rows? For example, say you have a numeric column, but there are some letters prefixed to the numbers in some of the post-row-1000 rows. These values are still meaningful to you, and with some data wrangling you can extract the actual numbers. Unfortunately read_csv has guessed at type double based on the first 1000 rows and since character type cannot be coerced into double, these values will be replaced with NA. If you have messy data like this the best thing to do is to force read_csv to read in as character type to preserve all values as they appear, you can then sort out the mess yourself. You can specify the column data type using the col_types argument. Below I have used a compact string of abbreviations to specify the column types, see the help at ?read_csv or the readr vignette for the full list. You can see I got many parsing failures, which I can access with problems(). This is a data frame of the values that read_csv was unable to coerce into the type I specified, and so has replaced with NA. pokemon &lt;- readr::read_csv( file = &quot;data/messy_pokemon_data.csv&quot; , col_types = &quot;cdddcdcccDt&quot; ) ## Warning: 723 parsing failures. ## row col expected actual file ## 1 date_first_capture date like 31 May 1977 &#39;data/messy_pokemon_data.csv&#39; ## 2 date_first_capture date like 24 February 1973 &#39;data/messy_pokemon_data.csv&#39; ## 3 date_first_capture date like 21 June 1924 &#39;data/messy_pokemon_data.csv&#39; ## 4 date_first_capture date like 01 August 1925 &#39;data/messy_pokemon_data.csv&#39; ## 5 date_first_capture date like 06 August 1952 &#39;data/messy_pokemon_data.csv&#39; ## ... .................. .......... ................ ............................. ## See problems(...) for more details. # c = character, d = double, D = Date, t = time Let’s take a look at the problems. problems(pokemon) %&gt;% head() row col expected actual file 1 date_first_capture date like 31 May 1977 ‘data/messy_pokemon_data.csv’ 2 date_first_capture date like 24 February 1973 ‘data/messy_pokemon_data.csv’ 3 date_first_capture date like 21 June 1924 ‘data/messy_pokemon_data.csv’ 4 date_first_capture date like 01 August 1925 ‘data/messy_pokemon_data.csv’ 5 date_first_capture date like 06 August 1952 ‘data/messy_pokemon_data.csv’ 6 date_first_capture date like 17 January 1915 ‘data/messy_pokemon_data.csv’ And since I know that there are problems with combat_power let’s take a look there. problems(pokemon) %&gt;% dplyr::filter(col == &quot;combat_power&quot;) %&gt;% head() row col expected actual file 12 combat_power a double P577 ‘data/messy_pokemon_data.csv’ 96 combat_power a double P458 ‘data/messy_pokemon_data.csv’ 97 combat_power a double P455 ‘data/messy_pokemon_data.csv’ 98 combat_power a double P518 ‘data/messy_pokemon_data.csv’ 99 combat_power a double P348 ‘data/messy_pokemon_data.csv’ 100 combat_power a double P542 ‘data/messy_pokemon_data.csv’ The problems() feature in read_csv is super useful, it helps you isolate the problem data so you can fix it. Other arguments within read_csv that I will just mention, with their default settings are col_names = TRUE: the first row on the imput is used as the column names. na = c(&quot;&quot;, &quot;NA&quot;): the default values to interpret as NA. trim_ws = TRUE: by default trims leading/trailing white space. skip = 0: number of lines to skip before reading data. guess_max = min(1000, n_max): maximum number of records to use for guessing column type. NB the bigger this is the longer it will take to read in the data. 3.3.3 .xlsx and .xls Excel workbooks come in many shapes and sizes. You may have one or many worksheets in one or many workbooks, there may only be certain cells that you are interested in. Below are a few examples of how to cope with these variations using readxl and purrr to iterate over either worksheets and/or workbooks. 3.3.3.1 A single worksheet in a single workbook The simplest combination, you are interested in one rectangular datset in a particular worksheet in one workbook. Leaving the defaults works fine on this dataset. Note that readxl::read_excel detects if the file is .xlsx or .xls and behaves accordingly. readxl::read_excel(path = &quot;data/port0499.xlsx&quot;) %&gt;% head() year polu_majorport polu_region direction cargo_group cargo_category cargo_description tonnage units 2000 Aberdeen Africa (excl. Mediterranean) Inwards Other General Cargo 92 Iron and steel products 1.153177 0 2000 Aberdeen Africa (excl. Mediterranean) Outwards Other General Cargo 92 Iron and steel products 2.406102 0 2000 Aberdeen Africa (excl. Mediterranean) Outwards Other General Cargo 99 Other general cargo &amp; containers &lt;20’ 3.664545 0 2000 Aberdeen America Inwards Other General Cargo 91 Forestry products 108.771082 0 2000 Aberdeen America Inwards Other General Cargo 92 Iron and steel products 11.045082 0 2000 Aberdeen America Outwards Other General Cargo 99 Other general cargo &amp; containers &lt;20’ 12.397106 0 Let’s set a few of the other arguments, run ?read_excel in the console to see the full list. readxl::read_excel( path = &quot;data/port0499.xlsx&quot; , sheet = 1 #number or name of sheet, default is first sheet , col_names = TRUE #default , col_types = &quot;text&quot; #a single type will recycle to all columns, specify each using character vector of the same length eg c(&quot;numeric&quot;, &quot;text&quot;, ...) ) %&gt;% head() year polu_majorport polu_region direction cargo_group cargo_category cargo_description tonnage units 2000 Aberdeen Africa (excl. Mediterranean) Inwards Other General Cargo 92 Iron and steel products 1.15317721340056 0 2000 Aberdeen Africa (excl. Mediterranean) Outwards Other General Cargo 92 Iron and steel products 2.4061025320368699 0 2000 Aberdeen Africa (excl. Mediterranean) Outwards Other General Cargo 99 Other general cargo &amp; containers &lt;20’ 3.6645448610128639 0 2000 Aberdeen America Inwards Other General Cargo 91 Forestry products 108.771081940982 0 2000 Aberdeen America Inwards Other General Cargo 92 Iron and steel products 11.045081750930599 0 2000 Aberdeen America Outwards Other General Cargo 99 Other general cargo &amp; containers &lt;20’ 12.397106259006 0 3.3.3.2 A single worksheet in many workbooks For example, you collect pokemon go capture data from many different players, the data all has the same struture and you want to read it in and row bind into a single dataframe in R. The code below collects the names of the 3 excel workbooks using fs::dir_ls, and, as these are not the only files in that folder, I’ve specified them using regular expressions (regex). Then we use purrr::map_df to iterate over this list of files, applying the function we supply, that is readxl::read_excel. The .id argument adds the file path into a new column, which we have named “player” in this instance. pokemon &lt;- fs::dir_ls(path = &quot;data&quot;, regex = &quot;pokemon_player_.\\\\.xlsx$&quot;) %&gt;% purrr::map_df(readxl::read_excel, .id = &quot;player&quot;) DT::datatable(data = pokemon) Note that the regex argument in fs::dir_ls is applied to the full file path so if I had tried to specify that the file name starts with “pokemon” by front anchoring it using “^pokemon” this would return no results, since the full name is actually “data/pokemon…”. regex cheatsheet stringr cheatsheet including regex 3.3.3.3 Many worksheets in a single workbook You have a single workbook, but it contains many worksheets of interest, each containing rectangular data with the same structure. For example, you have a workbook containing pokemon go captures data, where each different data collection point has its own sheet. The data structure, column names and data types are consistent. You want to read in and combine these data into a single dataframe. The code below sets the location of the workbook and puts this in the object path. It then collects the names of all the sheets in that workbook using readxl::excel_sheets. Next purrr::set_names sets these names in a vector so that they can be used in the next step. This vector of names is implictly assigned to the .x argument in purrr::map_df as it is the first thing passed to it. This means we can refer to it as .x in the function we are iterating, in this case readxl::read_excel. Finally, an id column is included, made up of the sheet names and named “sheet”. The output is a single dataframe with all the sheets row bound together. path &lt;- &quot;data/multi_tab_messy_pokemon_data.xlsx&quot; pokemon_collections &lt;- readxl::excel_sheets(path = path) %&gt;% purrr::set_names() %&gt;% purrr::map_df( ~ readxl::read_excel(path = path, sheet = .x) , .id = &quot;sheet&quot; ) DT::datatable(data = pokemon_collections) 3.3.3.4 Many worksheets in many workbooks Now we can use the above two solutions to combine data from many worksheets spread across many workbooks. As before, the data is rectangular and has the same structure. For example, you receive a workbook every month, containing pokemon go captures data, and data collection point has its own sheet. We create a function to import and combine the sheets from a single workbook, and then iterate this function over all the workbooks using purrr::map_df. #function to combine sheets from a single workbook read_and_combine_sheets &lt;- function(path){ readxl::excel_sheets(path = path) %&gt;% purrr::set_names() %&gt;% purrr::map_df( ~ readxl::read_excel(path = path, sheet = .x) , .id = &quot;sheet&quot; ) } #code to iterate over many workbooks pokemon_monthly_collections &lt;- fs::dir_ls( path = &quot;data&quot;, regex = &quot;pokemon_2019\\\\d{2}\\\\.xlsx$&quot;) %&gt;% purrr::map_df( read_and_combine_sheets , .id = &quot;month&quot; ) DT::datatable(data = pokemon_monthly_collections) 3.3.3.5 Non-rectangular data in many workbooks You have received some kind of data entry form that has been done in excel in a more human readable, rather than machine readable, format. Some of the cells contain instructions and admin data so you only want the data held in specific cells. This is non-rectangular data, that is, the data of interest is dotted all over the place. In this example we have pet forms, one sheet per workbook, and the data of interest is in cells B2, D5 and E8 only. Let’s see what we get if we naively try to read in one of these forms. readxl::read_excel( path = &quot;data/pet_form_1.xlsx&quot; ) %&gt;% head() ## New names: ## * `` -&gt; `..3` ## * `` -&gt; `..4` ## * `` -&gt; `..5` Name: Tiddles ..3 ..4 ..5 NA NA NA NA NA NA NA NA NA NA NA NA Age: 2 NA NA NA NA NA NA NA NA NA NA NA NA NA NA Species: cat It’s not what we wanted, let’s try again, now using the range argument readxl::read_excel( path = &quot;data/pet_form_1.xlsx&quot; , col_names = FALSE , range = &quot;A2:B2&quot; ) ## New names: ## * `` -&gt; `..1` ## * `` -&gt; `..2` ..1 ..2 Name: Tiddles The range argument helps, we have picked up one bit of the data, and it’s name. The range argument uses the cellranger package which allows you to refer to ranges in Excel files in Excel style. However, we have 3 disconnected data points, we need to iterate, so it’s purrr::map_df to the rescue once more. pet_details &lt;- purrr::map_df( .x = c(&quot;B2&quot;, &quot;D5&quot;, &quot;E8&quot;) , ~ readxl::read_excel( path = &quot;data/pet_form_1.xlsx&quot; , range = .x , col_names = &quot;cells&quot; , col_types = &quot;text&quot; #have to use text to preserve all data in single column ) ) pet_details cells Tiddles 2 cat This is pretty close to what we want, we have a dataframe named pet_details comprising a single “cells” column, which contains all the relevant data from this worksheet. Now we can reshape it. Below I create a tibble with the column names I want in the first column, under “cell_name” and pull the data from pet_details into it, then spread it. pet &lt;- tibble::tibble( cell_name = c(&quot;Name&quot;, &quot;Age&quot;, &quot;Species&quot;) , values = dplyr::pull(pet_details) ) %&gt;% dplyr::mutate( cell_name = as_factor(cell_name) #convert to factor to preserve order ) %&gt;% tidyr::spread( key = cell_name #make variable name the key and the values the value , value = values ) pet Name Age Species Tiddles 2 cat Having solved for one workbook and sheet, we can functionalise and iterate to gather the data from every wookbook. (Note if you have many worksheets as well, you’ll need another interim iteratative step) The function get_cells_and_reshape below iterates over reading each of the three cells from the worksheet, combines these into a single column dataframe, then adds the cell names and reshapes the data into tidy format. It takes three inputs, path, cells, cell_name, all of which are type character or character vector. get_cells_and_reshape &lt;- function(path, cells, cell_name){ purrr::map_df( .x = cells , ~ readxl::read_excel( path = path , range = .x , col_names = &quot;details&quot; , col_types = &quot;text&quot; #have to use text to preserve all data in single column ) ) %&gt;% dplyr::pull() %&gt;% #pull just the values from the previous df tibble::tibble( #create df with 2 columns, cell_name and these values cell_name = c(&quot;Name&quot;, &quot;Age&quot;, &quot;Species&quot;) , values = . #use . to refer to what was piped, when not in first position ) %&gt;% dplyr::mutate( cell_name = as_factor(cell_name) #convert to factor to preserve order ) %&gt;% tidyr::spread( #this is key = cell_name #make variable name the key and the values the value , value = values ) } Let’s test it on the first pet form data, first setting the paramaters to use in the function. path &lt;- &quot;data/pet_form_1.xlsx&quot; cells &lt;- c(&quot;B2&quot;, &quot;D5&quot;, &quot;E8&quot;) cell_name &lt;- c(&quot;Name&quot;, &quot;Age&quot;, &quot;Species&quot;) get_cells_and_reshape( path = path, cells = cells, cell_name = cell_name) Name Age Species Tiddles 2 cat It works! So now we can iterate this over all the pet form workbooks, specifying the paths using regex as before. Note we use .x in the path argument in the get_cells_and_reshape function to refer to the vector of paths piped to purrr::map_df from fs::dir_ls. fs::dir_ls( path = &quot;data&quot;, regex = &quot;pet_form_\\\\d\\\\.xlsx$&quot;) %&gt;% purrr::map_df( ~ get_cells_and_reshape(path = .x, cells = cells, cell_name = cell_name) , .id = &quot;path&quot; ) path Name Age Species data/pet_form_1.xlsx Tiddles 2 cat data/pet_form_2.xlsx Woof 1 dog data/pet_form_3.xlsx Hammy 0.5 hamster data/pet_form_4.xlsx Toothless 3 dragon read .xls/s read single tab read many tabs from one workbook (FASTS) read individual cells/cell ranges (SP) write with formatting openxlsx/xltabr 3.3.4 .sav 3.4 Connecting to databases 3.4.1 SQL DBI default schema link to C&amp;C talks on the subject 3.4.2 GCP BigQuery - bigrquery "],
["tables.html", "Chapter 4 Table/Data Frame manipulation 4.1 Pivot and reshape tables 4.2 Dropping and selecting columns 4.3 Filtering data 4.4 Get counts of data 4.5 Combine tables 4.6 Joining tables 4.7 Select specific columns in a join 4.8 Sum rows or columns 4.9 Replace NAs or other values 4.10 Creating new variables 4.11 Summarising data 4.12 Look up tables", " Chapter 4 Table/Data Frame manipulation This chapter provides an overview of code examples for table or data frame manipulation (a tidyverse data frame is referred to as a tibble). One of the main things you will have to do in any R project or RAP project will be manipulating the data that you are using in order to get it into the format you require. One of the main packages used to manipulate data is the dplyr package which we recommend and use throughout this book. The dplyr package (and others e.g. tidyr) are all part of the tidyverse. The tidyverse is a group of packages developed by Hadley Wickham and others and are all designed to work with each other. See https://www.tidyverse.org/ for more info. Tidyverse packages and functions can be combined and layered using the pipe operator %&gt;%. Dplyr is built to work with tidy data. To find out more about tidy data please look at the following link https://r4ds.had.co.nz/tidy-data.html but the general principles are: Each variables must have its own column Each observation must have its own row Each value must have its own cell 4.1 Pivot and reshape tables There will be two examples for pivoting tables provided: The tidyr package uses the gather/spread functions and is often used to create tidy data The reshape2 package is also a useful package to pivot tables and has added functionality such as providing totals of columns etc. We want to have the day of the week variable running along the top so each day of the week is its own column. Table 4.1: Number of road accidents by accident severity and weekday Accident_Severity Day_of_Week n 1 1 300 1 2 205 1 3 187 1 4 233 1 5 220 1 6 250 Tidyr package Using the tidyr package, gather and spread functions can be used to pivot the table views: gather makes wide data longer i.e. variables running along the top can be “gathered” into rows running down. spread makes long data wider i.e. one variable can be spread and run along the top with each value being a variable. # Pivot table using tidyr package library(tidyr) road_accidents_weekdays &lt;- road_accidents_small %&gt;% tidyr::spread(Day_of_Week, n) With the spread function above you need to first specify the variable you want to spread, in this case Day_of_Week, and then the variable that will be used to populate the columns (n). Table 4.2: Number of road accidents by accident severity and weekday, tidyr::spread Accident_Severity 1 2 3 4 5 6 7 1 300 205 187 233 220 250 281 2 3009 2948 3230 3227 3246 3649 3225 3 11668 14783 16065 15859 16331 17346 13720 The opposite can also be done using the gather function: GET HELP ON THIS # Pivot table using tidyr package library(tidyr) road_accidents_gather &lt;- road_accidents_weekdays %&gt;% tidyr::gather(Accident_Severity, n, 1:7) Reshape2 package Again, this has two functions which can be used to pivot tables: melt makes wide data longer dcast makes long data wider # Pivot table using reshape2 package library(reshape2) road_accidents_weekdays2 &lt;- reshape2::dcast(road_accidents_small, Accident_Severity ~ Day_of_Week, value.var = &quot;n&quot;) With the dcast function above, after stating the name of the data frame, you need to specify the variable(s) you want in long format (multiple variables seperated by “+”), in this case Accident_Severity, and then the wide format variable(s) are put after the tilda (again multiple seperated by “+”). The value.var argument specifies which column will be used to populate the new columns, in this case it is n. Table 4.3: Number of road accidents by accident severity and weekday, reshape2::dcast Accident_Severity 1 2 3 4 5 6 7 1 300 205 187 233 220 250 281 2 3009 2948 3230 3227 3246 3649 3225 3 11668 14783 16065 15859 16331 17346 13720 If you want to create sums and totals of the tables this can also be done using reshape2. For example, taking the original table, we want to pivot it and sum each severity to get the total number of accidents per day. # Pivot table using reshape2 package library(reshape2) road_accidents_weekdays3 &lt;- reshape2::dcast(road_accidents_small, Accident_Severity ~ Day_of_Week, value.var = &quot;n&quot;, sum, margins = &quot;Accident_Severity&quot;) In this example, we use the margins argument to specify what we want to combine to create totals. So we want to add all the accident severity figures up for each weekday. Before using margin you need to specify how the margins are calculated, in this case we want a sum. Alternative options are to calculate the length, i.e. the number of rows. Table 4.4: Number of road accidents by accident severity and weekday plus totals, reshape2::dcast Accident_Severity 1 2 3 4 5 6 7 1 300 205 187 233 220 250 281 2 3009 2948 3230 3227 3246 3649 3225 3 11668 14783 16065 15859 16331 17346 13720 (all) 14977 17936 19482 19319 19797 21245 17226 The opposite can also be done using the melt function. # Pivot table using reshape2 package library(reshape2) road_accidents_melt &lt;- reshape2::melt(road_accidents_weekdays2, id.vars = &quot;Accident_Severity&quot;, measure.vars = c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;), variable.name = &quot;Day_of_Week&quot;, value.name = &quot;n&quot;) For the melt function you need to specify: id.vars = “variables to be kept as columns” measure.vars = c(“variables to be created as one column”) variable.name = “name of created column using the measure.vars” value.name = “name of value column” Table 4.5: Number of road accidents by accident severity and weekday, reshape2::melt Accident_Severity Day_of_Week n 1 1 300 2 1 3009 3 1 11668 1 2 205 2 2 2948 3 2 14783 4.2 Dropping and selecting columns Use the dplyr select function to both select and drop columns. Select columns road_accidents_4_cols &lt;- road_accidents %&gt;% dplyr::select(acc_index, Accident_Severity, Date, Police_Force) Table 4.6: Four columns from road accidents 2017 acc_index Accident_Severity Date Police_Force 2017010001708 1 2017-08-05 1 2017010009342 3 2017-01-01 1 2017010009344 3 2017-01-01 1 2017010009348 3 2017-01-01 1 2017010009350 2 2017-01-01 1 2017010009351 3 2017-01-01 1 Drop columns Note that to drop columns the difference is putting a “-” in front of the variable name. road_accidents_3_cols &lt;- road_accidents_4_cols %&gt;% dplyr::select(-Police_Force) Table 4.7: Three columns from road accidents 2017 acc_index Accident_Severity Date 2017010001708 1 2017-08-05 2017010009342 3 2017-01-01 2017010009344 3 2017-01-01 2017010009348 3 2017-01-01 2017010009350 2 2017-01-01 2017010009351 3 2017-01-01 4.3 Filtering data Use the dplyr filter function to filter data. This example filters the data for slight severity accidents (accident severity 3). road_accidents_slight &lt;- road_accidents_4_cols %&gt;% dplyr::filter(Accident_Severity == 3) Table 4.8: Slight severity road accidents 2017 acc_index Accident_Severity Date Police_Force 2017010009342 3 2017-01-01 1 2017010009344 3 2017-01-01 1 2017010009348 3 2017-01-01 1 2017010009351 3 2017-01-01 1 2017010009353 3 2017-01-01 1 2017010009354 3 2017-01-01 1 To filter multiple conditions: And operator road_accidents_filter &lt;- road_accidents_4_cols %&gt;% dplyr::filter(Accident_Severity == 3 &amp; Police_Force == 4) Or operator road_accidents_filter2 &lt;- road_accidents_4_cols %&gt;% dplyr::filter(Accident_Severity == 3 | Accident_Severity == 2) Note: filtering with characters must be wrapped in “quotations” e.g: road_accidents_filter3 &lt;- road_accidents %&gt;% dplyr::filter(`Local_Authority_(Highway)` == &quot;E09000010&quot;) Also note that in the above example the variable is quoted in back ticks (`). This is because some variable names confuse R due to brackets and numbers and need to be wrapped in back ticks so R knows that everything inside the back ticks is a variable name. 4.4 Get counts of data To get counts for groups of data, the dplyr tally function can be used in conjunction with the dplyr group by function. This groups the data into the required groups and then tallys how many records are in each group. # Create grouped data set with counts road_accidents_small &lt;- road_accidents %&gt;% dplyr::group_by(Accident_Severity, Day_of_Week) %&gt;% dplyr::tally() The above example creates groups by accident severity and weekday and counts how many accidents are in each group (one row equals one accident therefore the tally is counting accidents). Table 4.9: Road accidents 2017 by accident severity and weekday Accident_Severity Day_of_Week n 1 1 300 1 2 205 1 3 187 1 4 233 1 5 220 1 6 250 4.5 Combine tables When combining data from two tables there are two ways to do this in R: Bind the tables by basically either appending the tables on the rows or columns Join the tables using the dplyr version of SQL joins Binding tables Binding tables is mainly done to append tables by creating more rows, however tables can also be binded by adding more columns. Although it is recommended to use the dplyr join functions to combine columns (see 5.6). Here are three tables, one shows data for accident severity of 1, one for accident severity of 2, and one for accident severity of 3. Table 4.10: Number of fatal road accidents in 2017, by weekday Accident_Severity Day_of_Week n 1 1 300 1 2 205 1 3 187 1 4 233 1 5 220 1 6 250 1 7 281 Table 4.10: Number of serious injury road accidents in 2017, by weekday Accident_Severity Day_of_Week n 2 1 3009 2 2 2948 2 3 3230 2 4 3227 2 5 3246 2 6 3649 2 7 3225 Table 4.10: Number of slight injury road accidents in 2017, by weekday Accident_Severity Day_of_Week n 3 1 11668 3 2 14783 3 3 16065 3 4 15859 3 5 16331 3 6 17346 3 7 13720 To combine these tables we can use the bind_rows function from the dplyr package. Use bind_rows when you want to append the tables underneath one another to make one longer table, i.e. you want to add more rows. Ensure that the column names for each table are exactly the same in each table. # combine tables using bind_rows library(dplyr) all_accidents &lt;- accidents_1 %&gt;% dplyr::bind_rows(accidents_2, accidents_3) Table 4.11: Road accident data 2017, bind_rows Accident_Severity Day_of_Week n 1 1 300 1 2 205 1 3 187 1 4 233 1 5 220 1 6 250 1 7 281 2 1 3009 2 2 2948 2 3 3230 2 4 3227 2 5 3246 2 6 3649 2 7 3225 3 1 11668 3 2 14783 3 3 16065 3 4 15859 3 5 16331 3 6 17346 3 7 13720 4.6 Joining tables Joins in R can be done using dplyr. This is generally to combine columns of data from two tables: # combine tables using left join library(dplyr) all_accidents_cols_join &lt;- road_acc_1 %&gt;% dplyr::left_join(road_acc_2, by = &quot;acc_index&quot;) This uses the same principles as SQL, by specifying what the tables should be joined on using the by = argument. Dplyr has all the usual SQL joins for example, inner_join, full_join, right_join. All of these are used in the same way as the left join example above. Another useful join for data manipulation is an anti_join. This provides all the data that is not in the joined table. For example, the below snapshot of a table displays road accident totals broken down by accident severity and weekday: Accident_Severity Day_of_Week n 1 1 300 1 2 205 1 3 187 1 4 233 1 5 220 1 6 250 I am interested in creating two sub-groups of this data, a table for all accidents on a Monday (weekday 2), and all other accidents. First, I get the Monday data using the dplyr filter function (see 5.3). Accident_Severity Day_of_Week n 1 2 205 2 2 2948 3 2 14783 Then, I can use an anti-join to create a table which has all of the data that is not in the above table: # create table of all rows not in the joined table library(dplyr) all_accidents_not_monday &lt;- road_accidents_small %&gt;% dplyr::anti_join(accidents_monday, by = c(&quot;Accident_Severity&quot;, &quot;Day_of_Week&quot;)) The above code takes the initial table we want to get our data from (road_accidents_small) and anti joins accidents_monday. This says, “get all the rows from road_accidents_small that are not in accidents_monday”. Again, note the need to specify what the join rows would be joined and compared by. Table 4.12: Road accident data 2017 not on a Monday by accident severity Accident_Severity Day_of_Week n 1 1 300 1 3 187 1 4 233 1 5 220 1 6 250 1 7 281 2 1 3009 2 3 3230 2 4 3227 2 5 3246 2 6 3649 2 7 3225 3 1 11668 3 3 16065 3 4 15859 3 5 16331 3 6 17346 3 7 13720 4.7 Select specific columns in a join Doing a join with dplyr will join all columns from both tables, however sometimes not all columns from each table are needed. Let’s look at some previous tables again: Table 4.13: Police force and accident severity information for accidents acc_index Police_Force Accident_Severity 2017010001708 1 1 2017010009342 1 3 2017010009344 1 3 2017010009348 1 3 2017010009350 1 2 2017010009351 1 3 Table 4.13: Date and weekday information for accidents acc_index Date Day_of_Week 2017010001708 2017-08-05 7 2017010009342 2017-01-01 1 2017010009344 2017-01-01 1 2017010009348 2017-01-01 1 2017010009350 2017-01-01 1 2017010009351 2017-01-01 1 Let’s say we want acc_index and Police_Force from the first table, and Date from the second table. # select specific columns from each table and left join library(dplyr) road_acc_3 &lt;- road_acc_1 %&gt;% dplyr::select(acc_index, Police_Force) %&gt;% dplyr::left_join(select(road_acc_2, acc_index, Date), by = &quot;acc_index&quot;) The above code takes the first table and uses the select statement to select the required columns from the first table. Then within the left_join command, to select the data from the second table, you again add the select statement. Note: you will need to select the joining variable in both tables but this will only appear once Table 4.14: Police force and Date information for specific accidents acc_index Police_Force Date 2017010001708 1 2017-08-05 2017010009342 1 2017-01-01 2017010009344 1 2017-01-01 2017010009348 1 2017-01-01 2017010009350 1 2017-01-01 2017010009351 1 2017-01-01 4.8 Sum rows or columns These solutions use the base R functions rather than dplyr. 4.8.1 Sum rows To sum across a row: # sum across a row road_accidents_weekdays$rowsum &lt;- rowSums(road_accidents_weekdays, na.rm = TRUE) Table 4.15: Road accidents 2017 by accident severity and weekday Accident_Severity 1 2 3 4 5 6 7 rowsum 1 300 205 187 233 220 250 281 1677 2 3009 2948 3230 3227 3246 3649 3225 22536 3 11668 14783 16065 15859 16331 17346 13720 105775 To sum across specific rows: # sum across specific rows road_accidents_weekdays$alldays &lt;- road_accidents_weekdays$`1` + road_accidents_weekdays$`2`+ road_accidents_weekdays$`3`+ road_accidents_weekdays$`4`+ road_accidents_weekdays$`5`+ road_accidents_weekdays$`6`+ road_accidents_weekdays$`7` Table 4.16: Road accidents 2017 by accident severity and weekday Accident_Severity 1 2 3 4 5 6 7 alldays 1 300 205 187 233 220 250 281 1676 2 3009 2948 3230 3227 3246 3649 3225 22534 3 11668 14783 16065 15859 16331 17346 13720 105772 4.8.2 Sum columns To sum columns to get totals of each column, note this will appear as a console output not in a data object: # sum columns colSums(road_accidents_weekdays, na.rm = TRUE) To get the totals of each column as a row in the data: library (janitor) # create total column road_accidents_weekdays &lt;- road_accidents_weekdays %&gt;% janitor::adorn_totals(&quot;row&quot;) Table 4.17: Road accidents 2017 by accident severity and weekday Accident_Severity 1 2 3 4 5 6 7 1 300 205 187 233 220 250 281 2 3009 2948 3230 3227 3246 3649 3225 3 11668 14783 16065 15859 16331 17346 13720 Total 14977 17936 19482 19319 19797 21245 17226 Reshape2 can also be used to get column totals when pivoting a table (See 5.1). 4.9 Replace NAs or other values To replace all NAs in one column (Junction Control column) with a specific value: library (tidyr) # replace all NAs with value -1 road_accidents_na$Junction_Control &lt;- road_accidents_na$Junction_Control %&gt;% tidyr::replace_na(-1) Note: To replace NA with a character the character replacement must be wrapped in “quotations” To replace all NAs in a data frame or tibble: # replace all NAs with value -1 road_accidents_na &lt;- road_accidents_na %&gt;% replace(is.na(.), -1) To replace values with NA, specify what value you want to be replaced with NA using the na_if function: # create nas road_accidents_na &lt;- road_accidents_na %&gt;% dplyr::na_if(-1) Note: to only create NAs in a specific column specify the column name in a similar manner to the first example in this section. To replace values: # replace 1st_road_class road_accidents_na &lt;- road_accidents_na %&gt;% dplyr::mutate(`1st_Road_Class` = dplyr::case_when(`1st_Road_Class` == 3 ~ &quot;A Road&quot;, TRUE ~ as.character(`1st_Road_Class`))) The case_when function is similar to using CASE WHEN in SQL. The TRUE argument indicates that if the values aren’t included in the case_when then they should be whatever is after the tilda (~) i.e. the equivalent of the ELSE statement in SQL. The “as.character” parameter says that everything that isn’t 3 should be kept as it is, this could be replaced by an arbitrary character or value e.g. “Other”. This would make everything that is not a 3, coded as “Other”. You can have multiple case_when arguments for multiple values, they just need to be seperated with a comma. Multiple case_when statements for different variables can be layered using the pipe operator %&gt;%. 4.10 Creating new variables 4.11 Summarising data 4.12 Look up tables "],
["dates.html", "Chapter 5 Working with dates", " Chapter 5 Working with dates NOT FINISHED - need to write about lubridate "],
["factors.html", "Chapter 6 Working with factors", " Chapter 6 Working with factors Working with factors can be tricky to both the new and the experience R user as their behaviour is not always intuitive. We can illustrate this with a couple of examples. Firstly concatenating factors may not work as intended: my_factor &lt;- factor(c(&quot;bob&quot;, &quot;george&quot;, &quot;bob&quot;)) my_vector &lt;- c(my_factor, my_factor) my_vector #&gt; [1] 1 2 1 1 2 1 instead we would first need to convert to a character vector my_vector_2 &lt;- c(as.character(my_factor), as.character(my_factor)) my_vector_2 #&gt; [1] &quot;bob&quot; &quot;george&quot; &quot;bob&quot; &quot;bob&quot; &quot;george&quot; &quot;bob&quot; Secondly, we may sometimes find a numeric vector is being stored as a factor: df &lt;- read.csv(&quot;data/factor_example.csv&quot;) my_vector &lt;- df[[2]] typeof(my_vector) #&gt; [1] &quot;integer&quot; my_vector #&gt; [1] #N/A #N/A 1 2 3 1 #N/A #N/A #N/A #&gt; Levels: #N/A 1 2 3 to transform this to a numeric variable we can proceed as follows my_vector_2 &lt;- as.numeric(levels(my_vector)[my_vector]) #&gt; Warning: NAs introduced by coercion typeof(my_vector_2) #&gt; [1] &quot;double&quot; my_vector_2 #&gt; [1] NA NA 1 2 3 1 NA NA NA To alleviate some of these issues it is useful to use the forcats package NOT FINISHED - need to write about forcats "],
["plots.html", "Chapter 7 Plotting and Data Visualisations", " Chapter 7 Plotting and Data Visualisations This chapter is for code examples of plotting and visualising data. Plotting in Base R First read in data and summarise it so we’re ready to plot: library(tidyverse) library(readxl) port &lt;- read_excel(&quot;data/port0499.xlsx&quot;) total_tonnage &lt;- port %&gt;% group_by(year) %&gt;% summarise(total = sum(tonnage)) average_tonnage &lt;- port %&gt;% group_by(polu_majorport) %&gt;% summarise(avg_tonnage = mean(tonnage)) %&gt;% top_n(5, wt = avg_tonnage) %&gt;% arrange(desc(avg_tonnage)) Line chart with Base R plot(total_tonnage$year, total_tonnage$total, type = &quot;l&quot;, col = &quot;red&quot;, lwd = 3, xlab = &quot;Year&quot;, ylab = &quot;Tonnage&quot;, main = &quot;Total Tonnage 2000 - 2017&quot;) Bar plot with Base R barplot(average_tonnage$avg_tonnage, width = 2, names.arg = c(&quot;Glensanda&quot;, &quot;Sullom Voe&quot;, &quot;Dover&quot;, &quot;Milford Haven&quot;, &quot;Rivers Hull &amp; Humber&quot;), col = &quot;lightblue&quot;, xlab = &quot;Major Port&quot;, ylab = &quot;Tonnage&quot;, main = &quot;Average Tonnage by Major Port (top 5) 2000 - 2017&quot;) Plotting with ggplot2 Line chart ggplot(data = total_tonnage) + geom_line(aes(x = year, y = total), col = &quot;red&quot;, size = 1.5) + xlab(&quot;Year&quot;) + ylab(&quot;Tonnage&quot;) + ggtitle(&quot;Total Tonnage 2000 - 2017&quot;) + scale_x_continuous(breaks = seq(2000, 2017, 2)) + theme_classic() Bar chart "],
["tidbits.html", "Chapter 8 Interesting tidbits 8.1 Rounding", " Chapter 8 Interesting tidbits 8.1 Rounding For rounding numerical values we have the function round(x, digits = 0). This rounds the value of the first argument to the specified number of decimal places (default 0). round(c(-1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5)) #&gt; [1] -2 0 0 2 2 4 4 This probably looks different to what you were expecting as at school we were generally taught that when rounding a 5 we go up if a positive value and down if a negative value. R, however, implements a different standard. We can see this by looking at the documentation (?round) Note that for rounding off a 5, the IEC 60559 standard (see also ‘IEEE 754’) is expected to be used, ‘go to the even digit’. Therefore round(0.5) is 0 and round(-1.5) is -2. However, this is dependent on OS services and on representation error (since e.g. 0.15 is not represented exactly, the rounding rule applies to the represented number and not to the printed number, and so round(0.15, 1) could be either 0.1 or 0.2). To implement what we consider normal rounding we can install use the janitor package and the function round_half_up library(janitor) janitor::round_half_up(c(-1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5)) #&gt; [1] -2 -1 1 2 3 4 5 If we do not have access to the package (or do not want to depend on the package) then we can implement3 round_half_up_v2 &lt;- function(x, digits = 0) { posneg &lt;- sign(x) z &lt;- abs(x) * 10 ^ digits z &lt;- z + 0.5 z &lt;- trunc(z) z &lt;- z / 10 ^ digits z * posneg } round_half_up_v2(c(-1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5)) #&gt; [1] -2 -1 1 2 3 4 5 see stackoverflow discussion for a discussion of the implementation↩ "]
]
